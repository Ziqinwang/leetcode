class Solution:
    def numDistinctIslands(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        distinct_islands = set()
        nav = [(0, 1), (1, 0), (0, -1), (-1, 0)]

        def bfs(i, j, queue):
            tmp = []

            while queue:
                x, y = queue.popleft()
                for _x, _y in nav:
                    a = x+ _x
                    b = y + _y
                    if 0 <= a < m and 0 <= b < n and grid[a][b] == 1:
                        grid[a][b] = 0
                        queue.append((a, b))
                        tmp.append((a-i, b-j))

            return tmp

        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    grid[i][j] = 0
                    queue = collections.deque()
                    queue.append((i, j))
                    tmp_result = bfs(i, j, queue)
                    distinct_islands.add(tuple(tmp_result))

        return len(distinct_islands)
